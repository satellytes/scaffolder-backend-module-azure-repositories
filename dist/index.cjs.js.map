{"version":3,"file":"index.cjs.js","sources":["../src/actions/helpers.ts","../src/actions/run/cloneAzureRepo.ts","../src/actions/util.ts","../src/actions/run/pushAzureRepo.ts","../src/actions/run/pullRequestAzureRepo.ts"],"sourcesContent":["/*\n * Copyright 2022 Parf端merie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Git } from '@backstage/backend-common';\nimport { Logger } from 'winston';\nimport * as azdev from 'azure-devops-node-api';\nimport * as GitApi from 'azure-devops-node-api/GitApi';\nimport * as GitInterfaces from 'azure-devops-node-api/interfaces/GitInterfaces';\nimport { IRequestHandler } from 'azure-devops-node-api/interfaces/common/VsoBaseInterfaces';\n\nexport async function cloneRepo({\n  dir,\n  auth,\n  logger,\n  remote = 'origin',\n  remoteUrl,\n  branch = 'main',\n}: {\n  dir: string;\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  remote?: string;\n  remoteUrl: string;\n  branch?: string;\n}): Promise<void> {\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.clone({\n    url: remoteUrl,\n    dir,\n    depth: 1,\n  });\n\n  await git.addRemote({\n    dir,\n    remote,\n    url: remoteUrl,\n  });\n\n  await git.checkout({\n    dir,\n    ref: branch,\n  });\n}\n\nexport async function commitAndPushBranch({\n  dir,\n  auth,\n  logger,\n  remote = 'origin',\n  commitMessage,\n  gitAuthorInfo,\n  branch = 'scaffolder',\n}: {\n  dir: string;\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  remote?: string;\n  commitMessage: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n  branch?: string;\n}): Promise<void> {\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  const currentBranch = await git.currentBranch({ dir });\n\n  if (currentBranch !== branch) {\n    await git.branch({\n      dir,\n      ref: branch,\n    });\n\n    await git.checkout({\n      dir,\n      ref: branch,\n    });\n  }\n\n  await git.add({\n    dir,\n    filepath: '.',\n  });\n\n  await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote: remote,\n    remoteRef: `refs/heads/${branch}`,\n  });\n}\n\nexport async function createADOPullRequest({\n  gitPullRequestToCreate,\n  url,\n  authHandler,\n  repoId,\n  project,\n  supportsIterations,\n}: {\n  gitPullRequestToCreate: GitInterfaces.GitPullRequest;\n  url: string;\n  authHandler: IRequestHandler;\n  repoId: string;\n  project?: string;\n  supportsIterations?: boolean;\n}): Promise<void> {\n  // process.env.AZURE_TOKEN || \"\";\n\n  const connection = new azdev.WebApi(url, authHandler);\n\n  const gitApiObject: GitApi.IGitApi = await connection.getGitApi();\n\n  await gitApiObject.createPullRequest(\n    gitPullRequestToCreate,\n    repoId,\n    project,\n    supportsIterations,\n  );\n}\n","/*\n * Copyright 2022 Parf端merie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolveSafeChildPath } from \"@backstage/backend-common\";\nimport { InputError } from \"@backstage/errors\";\nimport { DefaultAzureDevOpsCredentialsProvider, ScmIntegrationRegistry } from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-backend\";\n\nimport { cloneRepo } from \"../helpers\";\n\nexport const cloneAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    organization: string;\n    remoteUrl: string;\n    branch?: string;\n    targetPath?: string;\n    server: string;\n    token?: string;\n  }>({\n    id: \"azure:repo:clone\",\n    description: \"Clone an Azure repository into the workspace directory.\",\n    schema: {\n      input: {\n        required: [\"remoteUrl\"],\n        type: \"object\",\n        properties: {\n          organization: {\n            title: 'Organization Name',\n            type: 'string',\n            description: 'The name of the organization in Azure DevOps.',\n          },\n          remoteUrl: {\n            title: \"Remote URL\",\n            type: \"string\",\n            description: \"The Git URL to the repository.\",\n          },\n          branch: {\n            title: \"Repository Branch\",\n            type: \"string\",\n            description: \"The branch to checkout to.\",\n          },\n          targetPath: {\n            title: \"Working Subdirectory\",\n            type: \"string\",\n            description:\n              \"The subdirectory of the working directory to clone the repository into.\",\n          },\n          server: {\n            type: \"string\",\n            title: \"Server hostname\",\n            description: \"The hostname of the Azure DevOps service. Defaults to dev.azure.com\",\n          },\n          token: {\n            title: \"Authenticatino Token\",\n            type: \"string\",\n            description: \"The token to use for authorization.\",\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { remoteUrl, branch, server } = ctx.input;\n\n      const targetPath = ctx.input.targetPath ?? \"./\";\n      const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n\n      const host = server ?? \"dev.azure.com\";\n      const type = integrations.byHost(host)?.type;\n\n      if (!type) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const organization = ctx.input.organization ?? 'notempty';\n      const url = `https://${host}/${organization}`;\n\n      const credentialProvider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await credentialProvider.getCredentials({ url: url });\n\n      if (credentials === undefined && ctx.input.token === undefined) {\n        throw new InputError(\n          `No credentials provided ${url}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? credentials!.token;\n\n      await cloneRepo({\n        dir: outputDir,\n        auth: { username: \"notempty\", password: token },\n        logger: ctx.logger,\n        remoteUrl: remoteUrl,\n        branch: branch,\n      });\n    },\n  });\n};\n","/*\n * Copyright 2022 Parf端merie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isChildPath } from \"@backstage/backend-common\";\n\nimport { join as joinPath, normalize as normalizePath } from \"path\";\n\nexport const getRepoSourceDirectory = (\n  workspacePath: string,\n  sourcePath: string | undefined\n) => {\n  if (sourcePath) {\n    const safeSuffix = normalizePath(sourcePath).replace(\n      /^(\\.\\.(\\/|\\\\|$))+/,\n      \"\"\n    );\n    const path = joinPath(workspacePath, safeSuffix);\n    if (!isChildPath(workspacePath, path)) {\n      throw new Error(\"Invalid source path\");\n    }\n    return path;\n  }\n  return workspacePath;\n};\n","/*\n * Copyright 2022 Parf端merie Douglas GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from \"@backstage/config\";\nimport { InputError } from \"@backstage/errors\";\nimport { DefaultAzureDevOpsCredentialsProvider, ScmIntegrationRegistry } from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-backend\";\n\nimport { commitAndPushBranch } from \"../helpers\";\nimport { getRepoSourceDirectory } from \"../util\";\n\nexport const pushAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) => {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    organization?: string;\n    branch?: string;\n    sourcePath?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    server: string;\n    token?: string;\n  }>({\n    id: \"azure:repo:push\",\n    description:\n      \"Push the content in the workspace to a remote Azure repository.\",\n    schema: {\n      input: {\n        required: [],\n        type: \"object\",\n        properties: {\n          organization: {\n            title: 'Organization Name',\n            type: 'string',\n            description: 'The name of the organization in Azure DevOps.',\n          },\n          branch: {\n            title: \"Repository Branch\",\n            type: \"string\",\n            description: \"The branch to checkout to.\",\n          },\n          sourcePath: {\n            type: \"string\",\n            title: \"Working Subdirectory\",\n            description:\n              \"The subdirectory of the working directory containing the repository.\",\n          },\n          gitCommitMessage: {\n            title: \"Git Commit Message\",\n            type: \"string\",\n            description:\n              \"Sets the commit message on the repository. The default value is 'Initial commit'\",\n          },\n          gitAuthorName: {\n            title: \"Default Author Name\",\n            type: \"string\",\n            description:\n              \"Sets the default author name for the commit. The default value is 'Scaffolder'.\",\n          },\n          gitAuthorEmail: {\n            title: \"Default Author Email\",\n            type: \"string\",\n            description: \"Sets the default author email for the commit.\",\n          },\n          server: {\n            type: \"string\",\n            title: \"Server hostname\",\n            description: \"The hostname of the Azure DevOps service. Defaults to dev.azure.com\",\n          },\n          token: {\n            title: \"Authenticatino Token\",\n            type: \"string\",\n            description: \"The token to use for authorization.\",\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { branch, gitCommitMessage, gitAuthorName, gitAuthorEmail, server } =\n        ctx.input;\n\n      const sourcePath = getRepoSourceDirectory(\n        ctx.workspacePath,\n        ctx.input.sourcePath\n      );\n\n      const host = server ?? \"dev.azure.com\";\n      const type = integrations.byHost(host)?.type;\n\n      if (!type) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const organization = ctx.input.organization ?? 'notempty';\n      const url = `https://${host}/${organization}`;\n\n      const credentialProvider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await credentialProvider.getCredentials({ url: url });\n\n      if (credentials === undefined && ctx.input.token === undefined) {\n        throw new InputError(\n          `No credentials provided ${url}, please check your integrations config`,\n        );\n      }\n\n      const token = ctx.input.token ?? credentials!.token;\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString(\"scaffolder.defaultAuthor.name\"),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString(\"scaffolder.defaultAuthor.email\"),\n      };\n\n      await commitAndPushBranch({\n        dir: sourcePath,\n        auth: { username: \"notempty\", password: token },\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString(\"scaffolder.defaultCommitMessage\") ||\n            \"Initial commit\",\n        gitAuthorInfo,\n        branch,\n      });\n    },\n  });\n};\n","import { DefaultAzureDevOpsCredentialsProvider, ScmIntegrationRegistry } from \"@backstage/integration\";\nimport { createTemplateAction } from \"@backstage/plugin-scaffolder-backend\";\nimport { InputError } from \"@backstage/errors\";\nimport { createADOPullRequest } from \"../helpers\";\nimport * as GitInterfaces from \"azure-devops-node-api/interfaces/GitInterfaces\";\nimport { getPersonalAccessTokenHandler, getBearerHandler } from \"azure-devops-node-api\";\n\n/**\n * Creates an `ado:repo:pr` Scaffolder action.\n *\n * @remarks\n *\n * This Scaffolder action will create a PR to a repository in Azure DevOps.\n *\n * @public\n */\nexport const pullRequestAzureRepoAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    organization?: string;\n    sourceBranch?: string;\n    targetBranch?: string;\n    title: string;\n    repoId: string;\n    project?: string;\n    supportsIterations?: boolean;\n    server: string;\n    token?: string;\n  }>({\n    id: 'azure:repo:pr',\n    description: 'Create a PR to a repository in Azure DevOps.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoId', 'title'],\n        properties: {\n          organization: {\n            title: 'Organization Name',\n            type: 'string',\n            description: 'The name of the organization in Azure DevOps.',\n          },\n          sourceBranch: {\n            title: 'Source Branch',\n            type: 'string',\n            description: 'The branch to merge into the source.',\n          },\n          targetBranch: {\n            title: 'Target Branch',\n            type: 'string',\n            description: \"The branch to merge into (default: main).\",\n          },\n          title: {\n            title: 'Title',\n            description: 'The title of the pull request.',\n            type: 'string',\n          },\n          repoId: {\n            title: 'Remote Repo ID',\n            description: 'Repo ID of the pull request.',\n            type: 'string',\n          },\n          project: {\n            title: 'ADO Project',\n            description: 'The Project in Azure DevOps.',\n            type: 'string',\n          },\n          supportsIterations: {\n            title: 'Supports Iterations',\n            description: 'Whether or not the PR supports interations.',\n            type: 'boolean',\n          },\n          server: {\n            type: \"string\",\n            title: \"Server hostname\",\n            description: \"The hostname of the Azure DevOps service. Defaults to dev.azure.com\",\n          },\n          token: {\n            title: 'Authenticatino Token',\n            type: 'string',\n            description: 'The token to use for authorization.',\n          },\n        }\n      }\n    },\n    async handler(ctx) {\n      const { title, repoId, server, project, supportsIterations } = ctx.input;\n\n      const sourceBranch = `refs/heads/${ctx.input.sourceBranch}` ?? `refs/heads/scaffolder`;\n      const targetBranch = `refs/heads/${ctx.input.targetBranch}` ?? `refs/heads/main`;\n\n      const host = server ?? \"dev.azure.com\";\n      const type = integrations.byHost(host)?.type;\n\n      if (!type) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const pullRequest: GitInterfaces.GitPullRequest = {\n        sourceRefName: sourceBranch,\n        targetRefName: targetBranch,\n        title: title,\n      } as GitInterfaces.GitPullRequest;\n\n      const organization = ctx.input.organization ?? 'notempty';\n      const url = `https://${host}/${organization}`;\n\n      const credentialProvider =\n        DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n      const credentials = await credentialProvider.getCredentials({ url: url });\n\n      if (credentials === undefined && ctx.input.token === undefined) {\n        throw new InputError(\n          `No credentials provided ${url}, please check your integrations config`,\n        );\n      }\n\n      const authHandler =\n        ctx.input.token || credentials?.type === 'pat'\n          ? getPersonalAccessTokenHandler(ctx.input.token ?? credentials!.token)\n          : getBearerHandler(credentials!.token);\n\n\n      await createADOPullRequest({\n        gitPullRequestToCreate: pullRequest,\n        url: url,\n        authHandler: authHandler,\n        repoId: repoId,\n        project: project,\n        supportsIterations: supportsIterations,\n      });\n    },\n  });\n};\n"],"names":["Git","azdev","createTemplateAction","resolveSafeChildPath","InputError","DefaultAzureDevOpsCredentialsProvider","normalizePath","path","joinPath","isChildPath","getPersonalAccessTokenHandler","getBearerHandler"],"mappings":"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"}